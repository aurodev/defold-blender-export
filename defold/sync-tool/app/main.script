-- ---------------------------------------------------------------------------

local gen 		= require("app.generator")

------------------------------------------------------------------------------------------------------------

local STREAM_TYPES = {

	["01"] 	= "INFO",
	["02"]	= "OBJECTS",
	["03"]	= "MESHES",
}

-- ---------------------------------------------------------------------------

local flags = imgui.WINDOWFLAGS_NOTITLEBAR
--	flags = bit.bor(flags, imgui.WINDOWFLAGS_NOBACKGROUND)
flags = bit.bor(flags, imgui.WINDOWFLAGS_NORESIZE)
flags = bit.bor(flags, imgui.WINDOWFLAGS_NOMOVE)
flags = bit.bor(flags, imgui.WINDOWFLAGS_NOSCROLLBAR)

-- ---------------------------------------------------------------------------

local buttonwidth 		= 400
local buttonheight 		= 80
local buttontextsize 	= 0.65

local generaltextsize 	= 0.65
local smalltextsize 	= 0.55
local mediumtextsize	= 0.75
local largetextsize		= 1.0

local fontsizebase 		= 20.0
local spacing 			= 2.0 

-- ---------------------------------------------------------------------------

local function is_valid_path( path )

	if type( path ) ~= "string" then return false end
	local fh = io.popen( "dir " .. path )
	if(fh) then 
		local results = fh:read("*a")
		pprint("RESULTS["..results.."]")
		if(#results > 0) then return true end
		fh:close()
	end
	return false
end

-- ---------------------------------------------------------------------------
local function set_style(self)
	imgui.set_style_window_rounding(0)
	imgui.set_style_frame_rounding(0)
	imgui.set_style_scrollbar_rounding(0)
-- 	imgui.set_style_color(imgui.ImGuiCol_Text, 1.0, 0.29, 0.70, 0.90)
-- 	imgui.set_style_color(imgui.ImGuiCol_TextDisabled, 0.60, 0.60, 0.60, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_WindowBg, 1.0, 0.96, 0.86, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_PopupBg, 0.05, 0.05, 0.10, 0.85)
-- 	imgui.set_style_color(imgui.ImGuiCol_Border, 0.70, 0.70, 0.70, 0.65)
-- 	imgui.set_style_color(imgui.ImGuiCol_BorderShadow, 0.00, 0.00, 0.00, 0.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_FrameBg, 0.93, 0.89, 0.79, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_FrameBgHovered, 0.90, 0.80, 0.80, 0.40)
-- 	imgui.set_style_color(imgui.ImGuiCol_FrameBgActive, 0.90, 0.65, 0.65, 0.45)
-- 	imgui.set_style_color(imgui.ImGuiCol_TitleBg, 0.00, 0.00, 0.00, 0.83)
-- 	imgui.set_style_color(imgui.ImGuiCol_TitleBgCollapsed, 0.40, 0.40, 0.80, 0.20)
-- 	imgui.set_style_color(imgui.ImGuiCol_TitleBgActive, 0.00, 0.00, 0.00, 0.87)
-- 	imgui.set_style_color(imgui.ImGuiCol_MenuBarBg, 0.01, 0.01, 0.02, 0.80)
-- 	imgui.set_style_color(imgui.ImGuiCol_ScrollbarBg, 0.93, 0.89, 0.79, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrab, 0.55, 0.53, 0.55, 0.51)
-- 	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrabHovered, 0.56, 0.56, 0.56, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_ScrollbarGrabActive, 0.56, 0.56, 0.56, 0.91)
-- 	imgui.set_style_color(imgui.ImGuiCol_CheckMark, 0.90, 0.90, 0.90, 0.83)
-- 	imgui.set_style_color(imgui.ImGuiCol_SliderGrab, 0.70, 0.70, 0.70, 0.62)
-- 	imgui.set_style_color(imgui.ImGuiCol_SliderGrabActive, 0.30, 0.30, 0.30, 0.84)
-- 	imgui.set_style_color(imgui.ImGuiCol_Button, 0.48, 0.72, 0.89, 0.0)
-- 	imgui.set_style_color(imgui.ImGuiCol_ButtonHovered, 0.50, 0.69, 0.99, 0.0)
-- 	imgui.set_style_color(imgui.ImGuiCol_ButtonActive, 0.80, 0.50, 0.50, 0.0)
-- 	imgui.set_style_color(imgui.ImGuiCol_Header, 0.30, 0.69, 1.00, 0.53)
-- 	imgui.set_style_color(imgui.ImGuiCol_HeaderHovered, 0.44, 0.61, 0.86, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_HeaderActive, 0.38, 0.62, 0.83, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_ResizeGrip, 1.00, 1.00, 1.00, 0.85)
-- 	imgui.set_style_color(imgui.ImGuiCol_ResizeGripHovered, 1.00, 1.00, 1.00, 0.60)
-- 	imgui.set_style_color(imgui.ImGuiCol_ResizeGripActive, 1.00, 1.00, 1.00, 0.90)
-- 	imgui.set_style_color(imgui.ImGuiCol_PlotLines, 1.00, 1.00, 1.00, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_PlotLinesHovered, 0.90, 0.70, 0.00, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_PlotHistogram, 0.90, 0.70, 0.00, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_PlotHistogramHovered, 1.00, 0.60, 0.00, 1.00)
-- 	imgui.set_style_color(imgui.ImGuiCol_TextSelectedBg, 0.00, 0.00, 1.00, 0.35)
-- 
	local fontsize 		= 1
	self.fonts 	= {}
	local regular_data, error = sys.load_resource("/app/fonts/Overpass-ExtraBold.ttf")
	self.fonts["Regular"] = imgui.font_add_ttf_data(regular_data, #regular_data, fontsize, fontsizebase)
	-- local bold_data, error = sys.load_resource("/app/fonts/Overpass-ExtraBold.ttf")
	-- self.fonts["Bold"] = imgui.font_add_ttf_data(bold_data, #bold_data, fontsize, fontsizebase)
	-- local italic_data, error = sys.load_resource("/app/fonts/Overpass-SemiBoldItalic.ttf")
	-- self.fonts["Italic"] = imgui.font_add_ttf_data(italic_data, #italic_data, fontsize, fontsizebase)
	-- local bolditalic_data, error = sys.load_resource("/app/fonts/Overpass-ExtraBoldItalic.ttf")
	-- self.fonts["BoldItalic"] = imgui.font_add_ttf_data(bolditalic_data, #bolditalic_data, fontsize, fontsizebase)
end

------------------------------------------------------------------------------------------------------------

local function connect(self) 

	if(self.client == nil) then 
		self.client = socket.tcp()
		self.client:connect("localhost", 5000)
		self.client:settimeout(0.05)
	end 
end 


------------------------------------------------------------------------------------------------------------
-- Notes: All incoming objects are in global coords (pos and rot)

local function processDataStore(self)

	-- pprint(self.datastore)
	-- Process objects
	if(self.datastore["OBJECTS"]) then

		self.objects = {}
		-- Add to object list 
		for k,v in pairs(self.datastore["OBJECTS"]) do 
			if k then 
				self.objects[k] = v 
			end 
		end
		-- Regen children using parent information 
		for k,v in pairs(self.objects) do 
			if(v.parent and v.parent.name) then 
				local parent = self.objects[v.parent.name]
				if(parent) then
					parent.children = parent.children or {} 
					table.insert(parent.children, v.name)
				end
			end 
		end

		self.datastore["OBJECTS"] = self.objects
	end 
end


------------------------------------------------------------------------------------------------------------

local function checkserver(self)

	if(self.client) then 

		local data, err, partial = self.client:receive("*l")
		-- print(data, err, partial)
		--if(data) then pprint(data) end
		if(data and err == nil) then 

			local beginCMD = string.match(data, "!!BCMD(..)!!")
			local endCMD = string.match(data, "!!ECMD(..)!!")

			-- Use cmdid to store the data after a begin
			if(beginCMD and STREAM_TYPES[beginCMD]) then 
				self.databuffer[beginCMD] = {}
				self.databuffercurr = STREAM_TYPES[beginCMD]
			end

			if(endCMD and STREAM_TYPES[endCMD]) then 
				self.datastore[STREAM_TYPES[endCMD]] = self.databuffer[STREAM_TYPES[endCMD]]
				processDataStore(self)
			end

			if( beginCMD == nil and endCMD == nil ) then 
				if(data and string.len(data) > 0) then
					table.insert(self.logtext, { text = tostring(data), timestamp = self.timestamp } )

					local tbl = json.decode(data)
					self.databuffer[self.databuffercurr] = tbl 
					pprint(self.databuffercurr)
				end
			end
		elseif(err) then
			if(err ~= "timeout") then 
				print("Server Read Error: ", err)
				print("Partial Recv: ", partial)
			end
		end 
	end 
end 

------------------------------------------------------------------------------------------------------------

function init(self)

    self.width, self.height = window.get_size()
	self.scale = self.height / 1136 --self.width / 640.0 
	self.hwidth = self.width * 0.5
	self.hheight = self.height * 0.5

	self.clicked = nil 
	self.swipe = {
		left 	= false,
		right 	= false,
		up 		= false,
		down 	= false,
	}

	imgui.set_ini_filename()
	set_style(self)

	self.logtext 		= {}
	
	-- How many seconds to attempt to sync files.
	self.sync_rate 		= 1
	
	self.collection_name= "sample"
	self.project_path  	= "/mnt/store1/Development/defold/repos/empty"
	self.project_path_ok= false
	self.timestamp  	= 0.0

	self.stream_info	= false
	self.stream_scene	= false
	self.stream_meshes	= false
	self.sync_files		= false

	self.btn_connect 	= "Connect Localhost"
	self.btn_log 		= true 

	-- Temp data storage while collecting incoming data
	self.databuffer		= {}
	self.databuffercurr = nil
	-- Permanent data set for "assessment and usage"
	self.datastore 		= {}

	-- Mapped list of objects from the data store
	self.objects 		= {}

	self.tmr_server = timer.delay(0.01, true, function(self)
		checkserver(self)
	end)

	self.tmr_sync = timer.delay(self.sync_rate, true, function(self)
		if(self.sync_files == true) then
			print("Here...")
			gen.makefolders(self.collection_name, self.project_path)
			gen.makecollection(self.collection_name, self.datastore["OBJECTS"], self.datastore["MESHES"])
		end  
	end)
end

------------------------------------------------------------------------------------------------------------

local function update_tab_config(self)

	if( imgui.button(self.btn_connect) ) then 
		if(self.btn_connect == "Connect Localhost") then
			connect(self)
			self.btn_connect 	= "Disconnect Localhost"
		else 
			if(self.client) then 
				self.client:send("quit")
				self.btn_connect 	= "Connect Localhost"
			end
		end
	end

	imgui.separator()
	imgui.text("Active Streams")
	local changed, checked = imgui.checkbox("Info", self.stream_info)
	if changed then
		if(self.client) then
			self.stream_info = checked
			self.client:send("info")
		end
	end
	imgui.same_line(0)
	local changed, checked = imgui.checkbox("Scene", self.stream_scene)
	if changed then
		if(self.client) then
			self.stream_scene = checked
			self.client:send("scene")
		end 
	end
	imgui.same_line(0)
	local changed, checked = imgui.checkbox("Meshes", self.stream_meshes)
	if changed then
		if(self.client) then
			self.stream_meshes = checked
			self.client:send("meshes")
		end 
	end

	imgui.separator()
	imgui.text("Project Information")
	if( self.project_path_ok == false ) then 
		imgui.set_style_color(imgui.ImGuiCol_Text, 0.90, 0.0, 0.0, 0.90) 
	end
	 
	local changed, text = imgui.input_text("Project Path", self.project_path)
	if(changed) then 
		self.project_path = text
		self.project_path_ok = is_valid_path(self.project_path)
		-- Add a litttle "red" text if we cant fine the path (do a ls or dir)
	end
	imgui.set_style_color(imgui.ImGuiCol_Text, 0.90, 0.90, 0.90, 0.90)

	local changed, text = imgui.input_text("Collection Name", self.collection_name)
	if(changed) then 
		self.collection_name = text
	end

	local changed, int = imgui.input_int("Sync Rate (secs)", self.sync_rate or 0)
	if changed then
		self.sync_rate = math.max(int, 1)
	end
	local changed, checked = imgui.checkbox("Sync Files", self.sync_files)
	if changed then
		self.sync_files = checked
	end
	
	imgui.separator()
	local changed, checked = imgui.checkbox("Log", self.btn_log)
	if changed then
		self.btn_log = checked
	end

	imgui.begin_child("Log", -1, -1)
	if(self.btn_log) then 
		for k,v in ipairs(self.logtext) do 
			imgui.text(string.format("%04f %s", v.timestamp, v.text))
		end
	end
	imgui.end_child()

end

------------------------------------------------------------------------------------------------------------

local function draw_tree_nodes(key, tn)

	local selected = imgui.tree_node(tostring(key))
	if(selected) then 
		local propcnt = 0
		for k,v in pairs(tn) do

			if(type(v) == "table") then 
				draw_tree_nodes(k, v)
			else
				imgui.bullet()
				imgui.selectable(tostring(k)..":"..tostring(v), false)
				propcnt = propcnt + 1
			end 
		end	
		imgui.tree_pop()
	end
end

local function update_tab_blender(self)

	-- Do top level here, then iterate nodes
	for k,v in pairs(self.datastore) do

		if(type(v) == "table") then 
			draw_tree_nodes(k, v)
		else
			imgui.bullet()
			imgui.selectable(tostring(k)..":"..tostring(v), false)
		end 
	end	
end 

------------------------------------------------------------------------------------------------------------

local function update_tab_preview(self)

end 

------------------------------------------------------------------------------------------------------------

function update(self, dt)

	imgui.set_next_window_pos(0, 0)
	imgui.set_next_window_size(self.width, self.height)
	
	imgui.begin_window("Soul Survivor", false, flags)
	imgui.set_window_font_scale(1.0)

	imgui.set_cursor_pos(20, 20)

	imgui.font_scale(self.fonts["Regular"], 1.0)
	imgui.font_push(self.fonts["Regular"])

	imgui.begin_tab_bar("tabs")

	local tab1_open = imgui.begin_tab_item("Config")
	if tab1_open then
		update_tab_config(self)
		imgui.end_tab_item()
	end

	local tab2_open = imgui.begin_tab_item("Blender Data")
	if tab2_open then
		update_tab_blender(self)
		imgui.end_tab_item()
	end

	local tab3_open = imgui.begin_tab_item("3D Preview")
	if tab3_open then
		update_tab_preview(self)
		imgui.end_tab_item()
	end

	imgui.end_tab_bar()

	imgui.font_pop()
	
	imgui.end_window()

	self.timestamp = self.timestamp + dt
end 

------------------------------------------------------------------------------------------------------------

function on_message(self, message_id, message, sender)

	if message_id == hash("on_gesture") then

		self.swipe.left = message.swipe_left
		self.swipe.right = message.swipe_right
		self.swipe.up = message.swipe_up
		self.swipe.down = message.swipe_down
		self.swipe.info = nil 

		if(message.swipe) then 
			self.swipe.info = {
				from 	= message.swipe.from,
				to 		= message.swipe.to,
				time 	= message.swipe.time,
			}
		end		
	end
end

------------------------------------------------------------------------------------------------------------

function on_input(self, action_id, action)

end

------------------------------------------------------------------------------------------------------------

function final(self)
	if(self.client) then 
		self.client:send("quit")
	end
end 

------------------------------------------------------------------------------------------------------------
